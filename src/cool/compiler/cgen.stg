sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(data, textFuncs, textMain) ::= <<
    .data
<data>

    .text
<textFuncs>


>>

class_template(title, seq) ::= <<
class_<title>:
    <seq>
>>

stringconst(index, tag, string, dimension, int_const) ::= <<
str_const<index>:
    .word   <tag>
    .word   <dimension>
    .word   String_dispTab
    .word   int_const<int_const>
    .asciiz "<string>"
    .align  2
>>

intconst(index, tag, val) ::= <<
int_const<index>:
    .word   <tag>
    .word   4
    .word   Int_dispTab
    .word   <val>
>>

boolconst() ::= <<
bool_const0:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   0
bool_const1:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   1

>>

init(name, parent, seq) ::= <<
<name>_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     <parent>_init <if(seq)><\n><seq><else><endif>
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
>>

class_protobj(index, name, size, seq) ::= <<
<name>_protObj:
    .word   <index>
    .word   <size>
    .word   <name>_dispTab <if(seq)><\n><seq><else><endif>
>>

push_args(args) ::= <<
<args :
    {arg | <arg>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
    }>
>>

class_disptab(name, seq) ::= <<
<name>_dispTab:
<seq>
>>

load_local_var(offset) ::= <<
    lw      $a0 <offset>($fp)
>>

load_var_of_class(offset) ::= <<
    lw      $a0 <offset>($s0)
>>

load_var_of_let(offset) ::= <<
    lw      $a0 <offset>($fp)
>>

const(name, index) ::= <<
    la      $a0 <name><index>
>>

store_let_var(seq, offset) ::= <<
<seq>
    sw      $a0 <offset>($fp)
>>

store_let_var_off(offset) ::= <<
    sw      $a0 <offset>($fp)
>>

store_class_off(offset) ::= <<
    sw      $a0 <offset>($s0)
>>

store_local_off(offset) ::= <<
    sw      $a0 <offset>($fp)
>>

instantiate(name) ::= <<
    la      $a0 <name>_protObj
    jal     Object.copy
    jal     <name>_init
>>

instantiate_self_type(name) ::= <<
    la      $t1 class_objTab
    lw      $t2 0($s0)          # class tag
    sll     $t2 $t2 3           # *8
    addu    $t1 $t1 $t2         # class_objTab + 8 * tag
    sw      $t1 0($sp)
    addiu   $sp $sp -4
    lw      $a0 0($t1)          # _protObj
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 4($t1)          # _init
    jalr    $t1
>>

dispatch_on_self(index, offset, file_string, line_number) ::= <<
    bnez    $a0 dispatch<index>
    la      $a0 str_const<file_string>
    li      $t1 <line_number>
    jal     _dispatch_abort
dispatch<index>:
    lw      $t1 8($a0)   # dispatch table
    lw      $t1 <offset>($t1)   # method offset
    jalr    $t1
>>

dispatch_on_static(index, offset, file_string, line_number, name) ::= <<
    bnez    $a0 dispatch<index>
    la      $a0 str_const<file_string>
    li      $t1 <line_number>
    jal     _dispatch_abort
dispatch<index>:
    la      $t1 <name>_dispTab   # dispatch table
    lw      $t1 <offset>($t1)   # method offset
    jalr    $t1
>>

funcDef(name, expression, pfree) ::= <<
<name>:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
<expression>
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12 <if(pfree)><\n><\t>addiu   $sp $sp <pfree><else><endif>
    jr      $ra
>>

let(decl, body, free) ::= <<
    addiu   $sp $sp -<free>     # let decl
<decl>      # let body
<body>
    addiu   $sp $sp <free>
>>

ifRule(condition, then, els, index) ::= <<
<condition>
    lw      $t1 12($a0)     # bool slot
    beqz    $t1 else<index>
<then>
    b       endif<index>
else<index>:
<els>
endif<index>:
>>

literal(val) ::= <<
	li $a0 <val>
>>

ret(val) ::= <<
    .word   <val>
>>

isvoid(index, val) ::= <<
<val>
    move    $t1 $a0
    la      $a0 bool_const1
    beqz    $t1 isvoid<index>
    la      $a0 bool_const0
isvoid<index>:
>>

neg(e1) ::= <<
                            #starting neg
<e1>
    jal     Object.copy
    lw      $t1 12($a0)     # int slot
    neg     $t1 $t1
    sw      $t1 12($a0)     # end neg, int slot
>>

plus(e1, e2) ::= <<
                            #starting plus
<e1>
	sw      $a0 0($sp)
	addiu   $sp $sp -4
<e2>
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    add     $t1 $t1 $t2
    sw      $t1 12($a0)     # end add, int slot
>>

minus(e1, e2) ::= <<
                            #starting minus
<e1>
	sw      $a0 0($sp)
	addiu   $sp $sp -4
<e2>
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    sub     $t1 $t1 $t2
    sw      $t1 12($a0)     # end minus, int slot
>>

mult(e1, e2, dStr) ::= <<
                            #starting mult
<e1>
	sw      $a0 0($sp)
	addiu   $sp $sp -4
<e2>
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    mul     $t1 $t1 $t2
    sw      $t1 12($a0)     # end mult, int slot
>>

div(e1, e2, dStr) ::= <<
                            #starting div
<e1>
	sw      $a0 0($sp)
	addiu   $sp $sp -4
<e2>
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    div     $t1 $t1 $t2
    sw      $t1 12($a0)     # end div, int slot
>>

equals(e1, e2, index) ::= <<
                            # starting equals
<e1>
    sw      $a0 0($sp)
	addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    move    $t2 $a0
    la      $a0 bool_const1
    beq     $t1 $t2 eq<index>
    la      $a1 bool_const0
    jal     equality_test
eq<index>:                  # end equals
>>


less(e1, e2, index) ::= <<
                            # starting less
<e1>
    sw      $a0 0($sp)
	addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    la      $a0 bool_const1
    blt     $t1 $t2 compare<index>
    la      $a0 bool_const0
compare<index>:
>>

lesseq(e1, e2, index) ::= <<
                            # starting less
<e1>
    sw      $a0 0($sp)
	addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    la      $a0 bool_const1
    ble     $t1 $t2 compare<index>
    la      $a0 bool_const0
compare<index>:
>>

while(c, b, index) ::= <<
while<index>:               # starting while
<c>
    lw      $t1 12($a0)     # bool slot
    beqz    $t1 endwhile<index>
<b>
    b while<index>
endwhile<index>:
    move    $a0 $zero
>>

not(index, seq) ::= <<
<seq>
    lw      $t1 12($a0)     # bool slot
    la      $a0 bool_const1
    beqz    $t1 not<index>
    la      $a0 bool_const0
not<index>:
>>

uMinus(e1, dStr) ::= <<
<e1>
	move $t1 $a0
	sub $a0 $a0 $t1
	sub $a0 $a0 $t1		<if(dStr)># <dStr><else><endif>
>>
